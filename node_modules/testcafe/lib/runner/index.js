'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _mapReverse = require('map-reverse');

var _mapReverse2 = _interopRequireDefault(_mapReverse);

var _events = require('events');

var _lodash = require('lodash');

var _bootstrapper = require('./bootstrapper');

var _bootstrapper2 = _interopRequireDefault(_bootstrapper);

var _reporter = require('../reporter');

var _reporter2 = _interopRequireDefault(_reporter);

var _task = require('./task');

var _task2 = _interopRequireDefault(_task);

var _runtime = require('../errors/runtime');

var _types = require('../errors/types');

var _typeAssertions = require('../errors/runtime/type-assertions');

var _utils = require('../errors/test-run/utils');

var _detectFfmpeg = require('../utils/detect-ffmpeg');

var _detectFfmpeg2 = _interopRequireDefault(_detectFfmpeg);

var _checkFilePath = require('../utils/check-file-path');

var _checkFilePath2 = _interopRequireDefault(_checkFilePath);

var _handleErrors = require('../utils/handle-errors');

var _optionNames = require('../configuration/option-names');

var _optionNames2 = _interopRequireDefault(_optionNames);

var _flagList = require('../utils/flag-list');

var _flagList2 = _interopRequireDefault(_flagList);

var _prepareReporters = require('../utils/prepare-reporters');

var _prepareReporters2 = _interopRequireDefault(_prepareReporters);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:runner');

class Runner extends _events.EventEmitter {
    constructor(proxy, browserConnectionGateway, configuration) {
        super();

        this.proxy = proxy;
        this.bootstrapper = this._createBootstrapper(browserConnectionGateway);
        this.pendingTaskPromises = [];
        this.configuration = configuration;
        this.isCli = false;

        this.apiMethodWasCalled = new _flagList2.default({
            initialFlagValue: false,
            flags: [_optionNames2.default.src, _optionNames2.default.browsers, _optionNames2.default.reporter]
        });
    }

    _createBootstrapper(browserConnectionGateway) {
        return new _bootstrapper2.default(browserConnectionGateway);
    }

    _disposeBrowserSet(browserSet) {
        return browserSet.dispose().catch(e => DEBUG_LOGGER(e));
    }

    _disposeReporters(reporters) {
        return _pinkie2.default.all(reporters.map(reporter => reporter.dispose().catch(e => DEBUG_LOGGER(e))));
    }

    _disposeTestedApp(testedApp) {
        return testedApp ? testedApp.kill().catch(e => DEBUG_LOGGER(e)) : _pinkie2.default.resolve();
    }

    _disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            task.abort();
            task.clearListeners();

            yield _this._disposeAssets(browserSet, reporters, testedApp);
        })();
    }

    _disposeAssets(browserSet, reporters, testedApp) {
        return _pinkie2.default.all([this._disposeBrowserSet(browserSet), this._disposeReporters(reporters), this._disposeTestedApp(testedApp)]);
    }

    _prepareArrayParameter(array) {
        array = (0, _lodash.flattenDeep)(array);

        if (this.isCli) return array.length === 0 ? void 0 : array;

        return array;
    }

    _createCancelablePromise(taskPromise) {
        const promise = taskPromise.then(({ completionPromise }) => completionPromise);
        const removeFromPending = () => (0, _lodash.pull)(this.pendingTaskPromises, promise);

        promise.then(removeFromPending).catch(removeFromPending);

        promise.cancel = () => taskPromise.then(({ cancelTask }) => cancelTask()).then(removeFromPending);

        this.pendingTaskPromises.push(promise);
        return promise;
    }

    // Run task
    _getFailedTestCount(task, reporter) {
        let failedTestCount = reporter.testCount - reporter.passed;

        if (task.opts.stopOnFirstFail && !!failedTestCount) failedTestCount = 1;

        return failedTestCount;
    }

    _getTaskResult(task, browserSet, reporters, testedApp) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            task.on('browser-job-done', function (job) {
                return browserSet.releaseConnection(job.browserConnection);
            });

            const browserSetErrorPromise = (0, _promisifyEvent2.default)(browserSet, 'error');

            const taskDonePromise = task.once('done').then(function () {
                return browserSetErrorPromise.cancel();
            });

            const promises = [taskDonePromise, browserSetErrorPromise];

            if (testedApp) promises.push(testedApp.errorPromise);

            try {
                yield _pinkie2.default.race(promises);
            } catch (err) {
                yield _this2._disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp);

                throw err;
            }

            yield _this2._disposeAssets(browserSet, reporters, testedApp);

            return _this2._getFailedTestCount(task, reporters[0]);
        })();
    }

    _createTask(tests, browserConnectionGroups, proxy, opts) {
        return new _task2.default(tests, browserConnectionGroups, proxy, opts);
    }

    _runTask(reporterPlugins, browserSet, tests, testedApp) {
        var _this3 = this;

        let completed = false;
        const task = this._createTask(tests, browserSet.browserConnectionGroups, this.proxy, this.configuration.getOptions());
        const reporters = reporterPlugins.map(reporter => new _reporter2.default(reporter.plugin, task, reporter.outStream));
        const completionPromise = this._getTaskResult(task, browserSet, reporters, testedApp);

        task.on('start', _handleErrors.startHandlingTestErrors);

        if (!this.configuration.getOption(_optionNames2.default.skipUncaughtErrors)) {
            task.once('test-run-start', _handleErrors.addRunningTest);
            task.once('test-run-done', _handleErrors.removeRunningTest);
        }

        task.on('done', _handleErrors.stopHandlingTestErrors);

        const setCompleted = () => {
            completed = true;
        };

        completionPromise.then(setCompleted).catch(setCompleted);

        const cancelTask = (() => {
            var _ref = (0, _asyncToGenerator3.default)(function* () {
                if (!completed) yield _this3._disposeTaskAndRelatedAssets(task, browserSet, reporters, testedApp);
            });

            return function cancelTask() {
                return _ref.apply(this, arguments);
            };
        })();

        return { completionPromise, cancelTask };
    }

    _registerAssets(assets) {
        assets.forEach(asset => this.proxy.GET(asset.path, asset.info));
    }

    _validateSpeedOption() {
        const speed = this.configuration.getOption(_optionNames2.default.speed);

        if (speed === void 0) return;

        if (typeof speed !== 'number' || isNaN(speed) || speed < 0.01 || speed > 1) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.invalidSpeedValue);
    }

    _validateConcurrencyOption() {
        const concurrency = this.configuration.getOption(_optionNames2.default.concurrency);

        if (concurrency === void 0) return;

        if (typeof concurrency !== 'number' || isNaN(concurrency) || concurrency < 1) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.invalidConcurrencyFactor);
    }

    _validateProxyBypassOption() {
        let proxyBypass = this.configuration.getOption(_optionNames2.default.proxyBypass);

        if (proxyBypass === void 0) return;

        (0, _typeAssertions.assertType)([_typeAssertions.is.string, _typeAssertions.is.array], null, '"proxyBypass" argument', proxyBypass);

        if (typeof proxyBypass === 'string') proxyBypass = [proxyBypass];

        proxyBypass = proxyBypass.reduce((arr, rules) => {
            (0, _typeAssertions.assertType)(_typeAssertions.is.string, null, '"proxyBypass" argument', rules);

            return arr.concat(rules.split(','));
        }, []);

        this.configuration.mergeOptions({ proxyBypass });
    }

    _validateScreenshotOptions() {
        const screenshotPath = this.configuration.getOption(_optionNames2.default.screenshotPath);
        const screenshotPathPattern = this.configuration.getOption(_optionNames2.default.screenshotPathPattern);

        if (screenshotPath) {
            this._validateScreenshotPath(screenshotPath, 'screenshots base directory path');

            this.configuration.mergeOptions({ [_optionNames2.default.screenshotPath]: (0, _path.resolve)(screenshotPath) });
        }

        if (screenshotPathPattern) this._validateScreenshotPath(screenshotPathPattern, 'screenshots path pattern');

        if (!screenshotPath && screenshotPathPattern) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotUseScreenshotPathPatternWithoutBaseScreenshotPathSpecified);
    }

    _validateVideoOptions() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const videoPath = _this4.configuration.getOption(_optionNames2.default.videoPath);
            const videoEncodingOptions = _this4.configuration.getOption(_optionNames2.default.videoEncodingOptions);

            let videoOptions = _this4.configuration.getOption(_optionNames2.default.videoOptions);

            if (!videoPath) {
                if (videoOptions || videoEncodingOptions) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotSetVideoOptionsWithoutBaseVideoPathSpecified);

                return;
            }

            _this4.configuration.mergeOptions({ [_optionNames2.default.videoPath]: (0, _path.resolve)(videoPath) });

            if (!videoOptions) {
                videoOptions = {};

                _this4.configuration.mergeOptions({ [_optionNames2.default.videoOptions]: videoOptions });
            }

            if (videoOptions.ffmpegPath) videoOptions.ffmpegPath = (0, _path.resolve)(videoOptions.ffmpegPath);else videoOptions.ffmpegPath = yield (0, _detectFfmpeg2.default)();

            if (!videoOptions.ffmpegPath) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.cannotFindFFMPEG);
        })();
    }

    _validateRunOptions() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this5._validateScreenshotOptions();
            yield _this5._validateVideoOptions();
            _this5._validateSpeedOption();
            _this5._validateConcurrencyOption();
            _this5._validateProxyBypassOption();
        })();
    }

    _createRunnableConfiguration() {
        return this.bootstrapper.createRunnableConfiguration().then(runnableConfiguration => {
            this.emit('done-bootstrapping');

            return runnableConfiguration;
        });
    }

    _validateScreenshotPath(screenshotPath, pathType) {
        const forbiddenCharsList = (0, _checkFilePath2.default)(screenshotPath);

        if (forbiddenCharsList.length) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.forbiddenCharatersInScreenshotPath, screenshotPath, pathType, (0, _utils.renderForbiddenCharsList)(forbiddenCharsList));
    }

    _setBootstrapperOptions() {
        this.configuration.prepare();
        this.configuration.notifyAboutOverridenOptions();

        this.bootstrapper.sources = this.configuration.getOption(_optionNames2.default.src) || this.bootstrapper.sources;
        this.bootstrapper.browsers = this.configuration.getOption(_optionNames2.default.browsers) || this.bootstrapper.browsers;
        this.bootstrapper.concurrency = this.configuration.getOption(_optionNames2.default.concurrency);
        this.bootstrapper.appCommand = this.configuration.getOption(_optionNames2.default.appCommand) || this.bootstrapper.appCommand;
        this.bootstrapper.appInitDelay = this.configuration.getOption(_optionNames2.default.appInitDelay);
        this.bootstrapper.filter = this.configuration.getOption(_optionNames2.default.filter) || this.bootstrapper.filter;
        this.bootstrapper.reporters = this.configuration.getOption(_optionNames2.default.reporter) || this.bootstrapper.reporters;
    }

    // API
    embeddingOptions(opts) {
        const assets = opts.assets,
              TestRunCtor = opts.TestRunCtor;


        this._registerAssets(assets);
        this.configuration.mergeOptions({ TestRunCtor });

        return this;
    }

    src(...sources) {
        if (this.apiMethodWasCalled.src) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.multipleAPIMethodCallForbidden, _optionNames2.default.src);

        sources = this._prepareArrayParameter(sources);
        this.configuration.mergeOptions({ [_optionNames2.default.src]: sources });

        this.apiMethodWasCalled.src = true;

        return this;
    }

    browsers(...browsers) {
        if (this.apiMethodWasCalled.browsers) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.multipleAPIMethodCallForbidden, _optionNames2.default.browsers);

        browsers = this._prepareArrayParameter(browsers);
        this.configuration.mergeOptions({ browsers });

        this.apiMethodWasCalled.browsers = true;

        return this;
    }

    concurrency(concurrency) {
        this.configuration.mergeOptions({ concurrency });

        return this;
    }

    reporter(name, output) {
        if (this.apiMethodWasCalled.reporter) throw new _runtime.GeneralError(_types.RUNTIME_ERRORS.multipleAPIMethodCallForbidden, _optionNames2.default.reporter);

        let reporters = (0, _prepareReporters2.default)(name, output);

        reporters = this._prepareArrayParameter(reporters);

        this.configuration.mergeOptions({ [_optionNames2.default.reporter]: reporters });

        this.apiMethodWasCalled.reporter = true;

        return this;
    }

    filter(filter) {
        this.configuration.mergeOptions({ filter });

        return this;
    }

    useProxy(proxy, proxyBypass) {
        this.configuration.mergeOptions({ proxy, proxyBypass });

        return this;
    }

    screenshots(path, takeOnFails, pattern) {
        this.configuration.mergeOptions({
            [_optionNames2.default.screenshotPath]: path,
            [_optionNames2.default.takeScreenshotsOnFails]: takeOnFails,
            [_optionNames2.default.screenshotPathPattern]: pattern
        });

        return this;
    }

    video(path, options, encodingOptions) {
        this.configuration.mergeOptions({
            [_optionNames2.default.videoPath]: path,
            [_optionNames2.default.videoOptions]: options,
            [_optionNames2.default.videoEncodingOptions]: encodingOptions
        });

        return this;
    }

    startApp(command, initDelay) {
        this.configuration.mergeOptions({
            [_optionNames2.default.appCommand]: command,
            [_optionNames2.default.appInitDelay]: initDelay
        });

        return this;
    }

    run(options = {}) {
        this.apiMethodWasCalled.reset();

        const skipJsErrors = options.skipJsErrors,
              disablePageReloads = options.disablePageReloads,
              quarantineMode = options.quarantineMode,
              debugMode = options.debugMode,
              selectorTimeout = options.selectorTimeout,
              assertionTimeout = options.assertionTimeout,
              pageLoadTimeout = options.pageLoadTimeout,
              speed = options.speed,
              debugOnFail = options.debugOnFail,
              skipUncaughtErrors = options.skipUncaughtErrors,
              stopOnFirstFail = options.stopOnFirstFail;


        this.configuration.mergeOptions({
            skipJsErrors: skipJsErrors,
            disablePageReloads: disablePageReloads,
            quarantineMode: quarantineMode,
            debugMode: debugMode,
            debugOnFail: debugOnFail,
            selectorTimeout: selectorTimeout,
            assertionTimeout: assertionTimeout,
            pageLoadTimeout: pageLoadTimeout,
            speed: speed,
            skipUncaughtErrors: skipUncaughtErrors,
            stopOnFirstFail: stopOnFirstFail
        });

        this._setBootstrapperOptions();

        const runTaskPromise = _pinkie2.default.resolve().then(() => this._validateRunOptions()).then(() => this._createRunnableConfiguration()).then(({ reporterPlugins, browserSet, tests, testedApp }) => {
            return this._runTask(reporterPlugins, browserSet, tests, testedApp);
        });

        return this._createCancelablePromise(runTaskPromise);
    }

    stop() {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            // NOTE: When taskPromise is cancelled, it is removed from
            // the pendingTaskPromises array, which leads to shifting indexes
            // towards the beginning. So, we must copy the array in order to iterate it,
            // or we can perform iteration from the end to the beginning.
            const cancellationPromises = (0, _mapReverse2.default)(_this6.pendingTaskPromises, function (taskPromise) {
                return taskPromise.cancel();
            });

            yield _pinkie2.default.all(cancellationPromises);
        })();
    }
}
exports.default = Runner;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
